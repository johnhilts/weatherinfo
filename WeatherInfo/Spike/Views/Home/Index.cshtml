@{
    ViewBag.Title = "Home Page";
}

<div>
    <div>
        Your Current Location:
        <span id="currentLocation" />
        <input id="StreetAddress" />
        <input id="City" />
        <input id="StateCode" />
        <input id="PostalCode" />
        <input id="CountryCode" />
        <br />
        Lat: <input id="Latitude" />
        Lon: <input id="Longitude" />
    </div>
    <div>
        Your Current Weather:
        <input id="currentWeather" />
    </div>
</div>

@section scripts {
    <script language="javascript" type="text/javascript">
        function GeoLocator() {
            this.hasGeoLocation = navigator && navigator.geolocation;
            this.Location = 0;
            this.ErrorMessage = "";
            this.LatitudeInput = $("#Latitude");
            this.LongitudeInput = $("#Longitude");
            this.AddressInfo = "";
            this.StreetAddress = $("#StreetAddress");
            //this.StreetAddress2 = $("#StreetAddress2");
            this.City = $("#City");
            this.StateCode = $("#StateCode");
            this.PostalCode = $("#PostalCode");
            this.CountryCode = $("#CountryCode");
            $("#updateButton").click(this.setLocationByAddress.bind(this));
        }

        GeoLocator.prototype.getCurrentLocation =
            function () {
                if (this.hasGeoLocation) {
                    navigator.geolocation.getCurrentPosition(this.getCurrentLocationSuccess.bind(this), this.getCurrentLocationError.bind(this));
                }
            };

        GeoLocator.prototype.getCurrentLocationSuccess =
            function (position) {
                this.Location = position;
                this.LatitudeInput.val(this.Location.coords.latitude);
                this.LongitudeInput.val(this.Location.coords.longitude);
                var hasAddress = $("#HasAddress");
                //if (hasAddress.val() === "False") {
                this.setAddress();
                this.setWeather();
                //}
            };

        GeoLocator.prototype.getCurrentLocationError =
            function (msg) {
                this.ErrorMessage = msg;
            };

        // TODO: this code has a dependency on Google maps api .... need to segregate this in case we need to disable or switch out
        GeoLocator.prototype.setAddress =
            function () {

                var geocoder = new google.maps.Geocoder();

                var location = new google.maps.LatLng(this.Location.coords.latitude, this.Location.coords.longitude);

                geocoder.geocode({ 'latLng': location }, this.setAddressCallback.bind(this));
            };

        GeoLocator.prototype.setAddressCallback =
            function (results, status) {
                if (status == google.maps.GeocoderStatus.OK) {
                    if (results && results[0]) {
                        this.AddressInfo = results[0].address_components;
                        var streetNumber = "";
                        var streetName = "";
                        var addressComponentsCount = this.AddressInfo.length;
                        for (var i = 0; i < addressComponentsCount; i++) {
                            var longName = this.AddressInfo[i].long_name;
                            var shortName = this.AddressInfo[i].short_name;
                            switch (this.AddressInfo[i].types[0]) {
                                case "street_number":
                                    streetNumber = longName;
                                    break;
                                case "route":
                                    streetName = longName;
                                    break;
                                case "locality":
                                    this.City.val(longName);
                                    break;
                                case "administrative_area_level_1":
                                    this.StateCode.val(shortName);
                                    //this.StateCode.selectmenu('refresh');
                                    break;
                                case "country":
                                    this.CountryCode.val(shortName);
                                    //this.CountryCode.selectmenu('refresh');
                                    break;
                                case "postal_code":
                                    this.PostalCode.val(longName);
                                    break;
                            }
                        }
                        this.StreetAddress.val((streetNumber + " " + streetName).trim());
                    }
                }
            };

        // TODO: this code has a dependency on Google maps api .... need to segregate this in case we need to disable or switch out
        GeoLocator.prototype.setLocationByAddress =
            function () {
                var geocoder = new google.maps.Geocoder();

                // TODO: make this more int'l friendly
                var address = this.StreetAddress.val() + " " + this.City.val() + ", " + this.StateCode.val() + " " + this.PostalCode.val() + " " + this.CountryCode.val();

                geocoder.geocode({ 'address': address }, this.setLocationByAddressCallback.bind(this));

                return false;
            };

        GeoLocator.prototype.setLocationByAddressCallback =
            function (results, status) {
                if (status == google.maps.GeocoderStatus.OK) {
                    if (results[0]) {
                        this.LatitudeInput.val(results[0].geometry.location.lat());
                        this.LongitudeInput.val(results[0].geometry.location.lng());
                    }
                }

                $("form").submit();
            };

        GeoLocator.prototype.setWeather =
            function () {
                weatherHelper = new WeatherHelper();
                weatherHelper.getCurrentWeather();
            };

        function WeatherHelper() {
            this.Latitude = $("#Latitude");
            this.Longitude = $("#Longitude");
            this.CurrentWeather = $("#currentWeather");
        }

        WeatherHelper.prototype.getCurrentWeather =
            function () {
                var latitude = this.Latitude.val();
                var longitude = this.Longitude.val();

                $.ajax({
                    url: "/home/GetWeather",
                    type: "GET",
                    data: { latitude: latitude, longitude: longitude, },
                    context: $(this),
                    success: this.getGetCurrentWeatherSuccess.bind(this),
                    error: function (xhr, status, error) {
                        alert("Error: " + xhr.responseText);
                    }
                });
            };

        WeatherHelper.prototype.getGetCurrentWeatherSuccess =
            function (result) {
                if (result) {
                    this.CurrentWeather.val(result.Weather[0].Description);
                }
            };


        function JurisdictionHelper() {
            this.StateList = "";
            this.StateCode = $("#StateCode");
            this.CountryCode = $("#CountryCode");
            this.CountryCode.change(this.getStateListByCountry.bind(this));
        }

        JurisdictionHelper.prototype.getStateListByCountry =
            function () {
                var countryCode = this.CountryCode.val();

                $.ajax({
                    url: "/profile/GetStatesByCountry",
                    type: "GET",
                    data: { countryCode: countryCode, },
                    context: $(this),
                    success: this.getStateListByCountrySuccess.bind(this),
                    error: function (xhr, status, error) {
                        alert("Error: " + xhr.responseText);
                    }
                });
            };

        JurisdictionHelper.prototype.getStateListByCountrySuccess =
            function (result) {
                if (result) {
                    this.StateList = result;
                    var stateCount = this.StateList.length;
                    this.StateCode.empty();
                    for (var i = 0; i < stateCount; i++) {
                        var option = "<option value=\"" + this.StateList[i].Code + "\">" + this.StateList[i].Name + "</option>";
                        this.StateCode.append(option);
                    }
                    this.StateCode.val("");
                    this.StateCode.selectmenu('refresh');
                }
            };

        var geoLocator;
        //var jurisdictionHelper;

        $(document).ready(function () {
            geoLocator = new GeoLocator();
            geoLocator.getCurrentLocation();
            //jurisdictionHelper = new JurisdictionHelper();
        });


    </script>
}
